{"version":3,"sources":["components/notification/index.js","components/todoList/index.js","components/addTodo/index.js","containers/todoContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["emitter","EventEmitter","Notification","useState","open","setOpen","message","setMessage","autoHideAfterTimeout","setTimeout","addListener","msg","style","padding","border","marginBottom","backgroundColor","borderRadius","Todo","todo","removeTodo","handleChange","type","margin","checked","done","onChange","id","emit","title","hanldeCheckboxChange","textDecoration","position","right","cursor","fontWeight","onClick","AddTodo","addTodo","setTitle","bottom","display","width","onSubmit","e","preventDefault","newTodo","Math","random","value","target","placeholder","required","todoList","TodoContainer","todos","setTodos","handleRemoveTodo","newTodoList","filter","map","align","length","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.35853710.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { EventEmitter } from 'fbemitter'\r\n\r\nexport const emitter = new EventEmitter();\r\n\r\nconst Notification = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const [message, setMessage] = useState()\r\n    const notificationStyle = {\r\n        padding: 10,\r\n        border: \"1px green solid\",\r\n        marginBottom: 15,\r\n        backgroundColor: \"#55c555\",\r\n        borderRadius: 2\r\n    }\r\n    const reset = () => {\r\n        setOpen(false)\r\n    }\r\n    const autoHideAfterTimeout = () => {\r\n        setTimeout(() => reset(), 5000)\r\n    }\r\n    emitter.addListener(\"NOTIFICATION\", (msg) => {\r\n        setMessage(msg)\r\n        setOpen(true)\r\n        autoHideAfterTimeout()\r\n    })\r\n    if (!open) {\r\n        return null\r\n    }\r\n    return <div style={notificationStyle}><span>{message}</span></div>\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\nimport {emitter} from '../notification'\r\nconst Todo=({todo,removeTodo,handleChange})=>{\r\n    const hanldeCheckboxChange=()=>{\r\n        if(todo.done)\r\n            return null;\r\n        handleChange(todo.id)\r\n        emitter.emit(\"NOTIFICATION\",`\"${todo.title}\" task is completed successfully`)\r\n    }\r\n    return (<div>\r\n        <input type=\"checkbox\"\r\n         style={{margin:\"0 10px\"}}\r\n          checked={todo.done}\r\n          onChange={()=>hanldeCheckboxChange()}/>\r\n        <span style={todo.done?{textDecoration:\"line-through\"}:null}>{todo.title}</span>\r\n        <span style={{position:\"fixed\",\r\n        right:20,\r\n        padding:\"0 10px\",\r\n        cursor:\"pointer\",\r\n        fontWeight:600}}\r\n        onClick={()=>{removeTodo(todo.id)\r\n            emitter.emit(\"NOTIFICATION\",`\"${todo.title}\" task is removed successfully`)\r\n        }}>\r\n            X</span>\r\n        <hr/>\r\n    </div>)\r\n}\r\n\r\nexport default Todo","import React, { useState } from 'react'\r\nimport {emitter} from '../notification'\r\nconst AddTodo = ({ addTodo }) => {\r\n    const addTodoStyle = {\r\n        position: \"fixed\",\r\n        bottom: 10,\r\n        display: \"block\",\r\n        width: \"100%\"\r\n    }\r\n    const [title, setTitle] = useState()\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const newTodo = { id: Math.random(), title: title, done: false }\r\n        addTodo(newTodo)\r\n        emitter.emit(\"NOTIFICATION\",\"New todo added successfully\")\r\n        setTitle(\"\")\r\n    }\r\n    return (<div style={addTodoStyle}>\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                placeholder=\"Enter Something here\"\r\n                style={{ width: \"90%\", padding: 10 }}\r\n                required />\r\n            <input type=\"submit\" style={{ width: 80, padding: 10 }} />\r\n        </form>\r\n    </div>)\r\n}\r\n\r\nexport default AddTodo;","import React ,{useState} from 'react';\r\nimport Todo from '../../components/todoList';\r\nimport AddTodo from '../../components/addTodo';\r\nimport Notification from '../../components/notification';\r\nconst todoList=[\r\n    {id:1,title: 'Learn React',done:true},\r\n    {id:2,title: 'Create a todo Application',done:false},\r\n]\r\nconst TodoContainer = () => {\r\n    const [todos,setTodos]=useState(todoList)\r\n  const handleAddTodo=(newTodo)=>{\r\n      const newTodoList=[...todos,newTodo]\r\n      setTodos(newTodoList)\r\n  }\r\n  const handleRemoveTodo=(id)=>{\r\n      const newTodoList=todos.filter(todo=>todo.id!==id)\r\n      setTodos(newTodoList)\r\n  }\r\n  const hanldeCheckboxChange=(id)=>{\r\n      const newTodoList=todos.map(todo=>{\r\n          if(todo.id===id)\r\n            return {...todo,done:!todo.done}\r\n        return todo;\r\n        })\r\n        setTodos(newTodoList)\r\n  }\r\n    return (<div style={{ margin: 20 }}>\r\n        <h4 align=\"center\">Todo Application</h4>\r\n        <Notification/>\r\n        {todos.length>0?todos.map((todo)=><Todo todo={todo} key={todo.id} removeTodo={handleRemoveTodo}\r\n         handleChange={hanldeCheckboxChange}/>)\r\n        :<p align=\"center\">no todo left</p>}\r\n       <AddTodo addTodo={handleAddTodo}/>\r\n    </div>)\r\n}\r\n\r\nexport default TodoContainer","import React from 'react';\r\nimport './App.css';\r\nimport TodoContainer from './containers/todoContainer'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <h1 align=\"center\">React App</h1>\r\n     <TodoContainer/>\r\n    </div>\r\n  ); \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}